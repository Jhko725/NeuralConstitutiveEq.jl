# %%
from functools import partial
import jax
import jax.numpy as jnp
import equinox as eqx
import matplotlib.pyplot as plt
import numpy as np
from scipy.integrate import quad
from scipy.optimize import root_scalar
from scipy.special import gamma
from scipy.optimize import curve_fit
import scipy.special as sc
from neuralconstitutive.tipgeometry import Conical
from tqdm import tqdm

import pandas as pd

jax.config.update("jax_enable_x64", True)


# %%
class HonerkampWeeseBimodal(eqx.Module):
    A: float
    B: float
    t_x: float
    t_y: float
    t_a: float
    t_b: float
    n: int

    def __init__(
        self,
        A: float = 0.1994711402,
        B: float = 0.1994711402,
        t_x: float = 5e-2,
        t_y: float = 5.0,
        t_a: float = 1e-3,
        t_b: float = 1e2,
        n: int = 1000,
    ):
        # Default values for A, B correspond to 1/(2*sqrt(2*pi))
        self.A = A
        self.B = B
        self.t_x = t_x
        self.t_y = t_y
        self.t_a = t_a
        self.t_b = t_b
        self.n = n

    def __call__(self):
        t_i = jnp.logspace(jnp.log10(self.t_a), jnp.log10(self.t_b), self.n)
        h_i = self.A * jnp.exp(-0.5 * jnp.log(t_i / self.t_x) ** 2) + self.B * jnp.exp(
            -0.5 * jnp.log(t_i / self.t_y) ** 2
        )
        return t_i, h_i


# %%
spectrum = HonerkampWeeseBimodal()
t_i, h_i = spectrum()
fig, ax = plt.subplots(1, 1, figsize=(7, 5))
ax.plot(t_i, h_i, ".")
ax.set_xscale("log", base=10)
ax.set_xlabel("Relaxation Time τ[s]")
ax.set_ylabel("Relaxation Spectrum H(τ)[Pa]")
# %%
# @partial(jax.vmap, in_axes=(0, None, None))
def function_from_discrete_spectra(t: float, t_i: jax.Array, h_i: jax.Array):
    h0 = jnp.log(t_i[1]) - jnp.log(t_i[0])
    return jnp.dot(h_i * h0, jnp.exp(-t / t_i))

#%%
type(spectrum()[0])
# %%
t = np.linspace(1e-3, 1e2, 10000)
# g = function_from_discrete_spectra(t, *spectrum())
phi = partial(function_from_discrete_spectra, t_i=spectrum()[0], h_i=spectrum()[1])
g = jax.vmap(phi)(t)
fig, ax = plt.subplots(1, 1, figsize=(7, 5))
ax.plot(t, g)
ax.set_xlabel("Time[s]")
ax.set_ylabel("Relaxation Function[Pa]")
#%%
g_t = pd.DataFrame([t, g])
#%%
g_t = g_t.T
# %%
g_t.to_csv("test",index=False, header=False, sep=" ")
# %%
h_test1 = pd.read_csv("pyRespect/output/H.dat", header=None, sep=" ")
#%%
fig, ax = plt.subplots(1, 1, figsize=(7,5))
ax.plot(h_test1[0], np.exp(h_test1[1]), '.')
ax.set_xscale("log")
# %%
g_test1 = pd.read_csv("pyRespect/tests/test1.dat", header=None, sep=" ")
t = np.linspace(1e-3, 5*1e2, 100)
# g = function_from_discrete_spectra(t, *spectrum())
phi = partial(function_from_discrete_spectra, t_i=jnp.array(h_test1[0]), h_i=jnp.array(np.exp(h_test1[1])))
g = jax.vmap(phi)(t)
fig, ax = plt.subplots(1, 1, figsize=(7, 5))
ax.plot(t, g, '.')
ax.plot(g_test1[0], g_test1[1],'.')
ax.set_xlabel("Time[s]")
ax.set_ylabel("Relaxation Function[Pa]")
# %%
# %%
h_test1[0]
# %%
h_test1
# %%
