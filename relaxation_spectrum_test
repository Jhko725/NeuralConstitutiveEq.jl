# %%
from functools import partial
import jax
import jax.numpy as jnp
import equinox as eqx
import matplotlib.pyplot as plt
import numpy as np
from scipy.integrate import quad
from scipy.optimize import root_scalar
from scipy.special import gamma
from scipy.optimize import curve_fit
import scipy.special as sc
from tqdm import tqdm
import pandas as pd

from neuralconstitutive.tipgeometry import Conical
from neuralconstitutive.constitutive import FromLogDiscreteSpectrum
from neuralconstitutive.relaxation_spectrum import HonerkampWeeseBimodal

jax.config.update("jax_enable_x64", True)

# %%
bimodal = FromLogDiscreteSpectrum(HonerkampWeeseBimodal())
t_i, h_i = bimodal.discrete_spectrum
fig, ax = plt.subplots(1, 1, figsize=(7, 5))
ax.plot(t_i, h_i, ".")
ax.set_xscale("log", base=10)
ax.set_xlabel("Relaxation Time τ[s]")
ax.set_ylabel("Relaxation Spectrum H(τ)[Pa]")
# %%
t = np.linspace(1e-3, 1e2, 10000)
g = bimodal.relaxation_function(t)
fig, ax = plt.subplots(1, 1, figsize=(7, 5))
ax.plot(t, g, ".")
ax.set_xlabel("Time[s]")
ax.set_ylabel("Relaxation Function[Pa]")

# %%
g_t = pd.DataFrame([t, g])
# %%
g_t = g_t.T
# %%
g_t.to_csv("test", index=False, header=False, sep=" ")
# %%
h_test1 = pd.read_csv("pyRespect/output/H.dat", header=None, sep=" ")
# %%
fig, ax = plt.subplots(1, 1, figsize=(7, 5))
ax.plot(h_test1[0], np.exp(h_test1[1]), ".")
ax.set_xscale("log")
# %%
g_test1 = pd.read_csv("pyRespect/tests/test1.dat", header=None, sep=" ")
t = np.linspace(1e-3, 5 * 1e2, 100)
g = bimodal.relaxation_function(t)
fig, ax = plt.subplots(1, 1, figsize=(7, 5))
ax.plot(t, g, ".")
ax.plot(g_test1[0], g_test1[1], ".")
ax.set_xlabel("Time[s]")
ax.set_ylabel("Relaxation Function[Pa]")
# %%
# %%
h_test1[0]
# %%
h_test1
# %%
